#+title: Emacs Config

#+property: header-args :mkdirp yes
#+property: header-args:emacs-lisp :tangle-mode (identity #o555)

* Table of Contents
:PROPERTIES:
:TOC:      :include all :ignore this
:END:
:CONTENTS:
- [[#early-init][Early Init]]
- [[#garbage-collection][Garbage Collection]]
- [[#native-compil][Native Compil]]
- [[#functions][Functions]]
- [[#package-management][Package Management ]]
- [[#base-config][Base Config]]
- [[#theme][Theme]]
- [[#icons][Icons]]
- [[#dashboard][Dashboard]]
- [[#modeline][Modeline]]
- [[#which-key][Which-Key]]
- [[#general-keybindings][General Keybindings]]
- [[#sudo-edit][Sudo Edit]]
- [[#evil][Evil]]
- [[#dired][Dired]]
- [[#files][Files]]
- [[#workspaces][Workspaces]]
- [[#org][Org]]
- [[#vertico][Vertico]]
- [[#terminal][Terminal]]
- [[#git][Git]]
- [[#company][Company]]
- [[#projectile][Projectile]]
- [[#yasnippet][Yasnippet]]
- [[#dap][Dap]]
- [[#lsp][LSP]]
- [[#python][Python]]
- [[#rust][Rust]]
- [[#java][Java]]
- [[#flycheck][Flycheck]]
:END:


* Early Init
** Garbage collection at startup

#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
(setq gc-cons-threshold 100000000)
#+end_src

** Disable package-enable-at-startup
Package initialize occurs automatically, before user-init-file is loaded, but after early-init-file. We handle package initialization, so we must prevent Emacs from doing it early!

#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
(setq package-enable-at-startup nil)
#+end_src

** Unset file-name-handler-alist
Every file opened and loaded by Emacs will run through this list to check for a proper handler for the file, but during startup, it won’t need any of them.

#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
(defvar file-name-handler-alist-original file-name-handler-alist)
(setq file-name-handler-alist nil)
#+end_src

** Disable site-run-file

#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
(setq site-run-file nil)
#+end_src

** Disable backup files

#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
(setq make-backup-files nil)
#+end_src

** Disable screen jump
When the cursor moves out of the screen

#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
(setq scroll-conservatively 101)
#+end_src

** Disable Unnecessary Interface
It will be faster to disable them here before they've been initialized.

#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
(menu-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(scroll-bar-mode -1)
#+end_src
	 
* Garbage Collection
** gc-cons-threshold.
Use A large gc-cons-threshold may cause freezing
and stuttering during long-term interactive use.

*** The default value to use for `gc-cons-threshold'. If you experience freezing, decrease this.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(defvar better-gc-cons-threshold 134217728) ; 128mb

(add-hook 'emacs-startup-hook
            (lambda ()
            (setq gc-cons-threshold better-gc-cons-threshold)
            (setq file-name-handler-alist file-name-handler-alist-original)
            (makunbound 'file-name-handler-alist-original)))
#+end_src

*** Garbage Collect when Emacs is out of focus and avoid garbage collection when using minibuffer.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(add-hook 'emacs-startup-hook
            (lambda ()
            (if (boundp 'after-focus-change-function)
                (add-function :after after-focus-change-function
                                (lambda ()
                                (unless (frame-focus-state)
                                    (garbage-collect))))
                (add-hook 'after-focus-change-function 'garbage-collect))
            (defun gc-minibuffer-setup-hook ()
                (setq gc-cons-threshold (* better-gc-cons-threshold 2)))

            (defun gc-minibuffer-exit-hook ()
                (garbage-collect)
                (setq gc-cons-threshold better-gc-cons-threshold))

            (add-hook 'minibuffer-setup-hook #'gc-minibuffer-setup-hook)
            (add-hook 'minibuffer-exit-hook #'gc-minibuffer-exit-hook)))
#+end_src

* Native Compil
** Silence compiler warnings

Silence compiler warnings as they can be pretty disruptive

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(if (boundp 'comp-deferred-compilation)
    (setq comp-deferred-compilation nil)
    (setq native-comp-deferred-compilation nil))
#+end_src

** Noninteractive sessions

  Prioritize non-byte-compiled source files to
  prevent the use of stale byte-code. Otherwise, it saves us a little IO time
  to skip the mtime checks on every *.elc file.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq load-prefer-newer noninteractive)
#+end_src
  
* Functions
** Toggle Transparency

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(defun toggle-transparency ()
    (interactive)
    (let ((alpha (frame-parameter nil 'alpha)))
        (set-frame-parameter
        nil 'alpha
        (if (eql (cond ((numberp alpha) alpha)
                        ((numberp (cdr alpha)) (cdr alpha))
                        ;; Also handle undocumented (<active> <inactive>) form.
                        ((numberp (cadr alpha)) (cadr alpha)))
                100)
            '(90 . 90) '(100 . 100)))))
#+end_src

* Package Management
** Setup package archives

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                        ("org" . "https://orgmode.org/elpa/")
                        ("elpa" . "https://elpa.gnu.org/packages/")))
#+end_src

** Configure Package Manager

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(package-initialize)

(unless package-archive-contents
    (package-refresh-contents))
#+end_src

** Install use-packageo

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(unless (package-installed-p 'use-package)
    (package-install 'use-package))

(eval-and-compile
    (setq use-package-always-ensure t)
    (setq use-package-expand-minimally t)
    (setq use-package-enable-imenu-support t))

(eval-when-compile
    (require 'use-package)
    (require 'bind-key))
#+end_src

** Auto Update

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package auto-package-update
    :if (not (daemonp))
    :custom
    (auto-package-update-interval 7) ;; in days
    (auto-package-update-prompt-before-update t)
    (auto-package-update-delete-old-versions t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe))
#+end_src

** Diminish

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package diminish)
#+end_src

* Base Config
** Fonts

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(set-face-attribute 'default nil :font "JetBrains Mono" :height 105)
(set-face-attribute 'fixed-pitch nil :font "JetBrains Mono" :height 105)
(set-face-attribute 'variable-pitch nil :font "JetBrains Mono" :height 105)
#+end_src

** Cursor

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq-default evil-normal-state-cursor '(box "medium sea green")
              evil-insert-state-cursor '(bar "medium sea green")
              evil-visual-state-cursor '(hollow "orange")
              blink-cursor-mode nil)
#+end_src

** Column Number

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(column-number-mode)

;; Enable line numbers for some modes
(dolist (mode '(text-mode-hook
                                prog-mode-hook
                                conf-mode-hook))
    (add-hook mode (lambda ()
                    (display-line-numbers-mode 1)
                    (setq-default display-line-numbers-type 'relative)
                    )))

(dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Parentheses

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(show-paren-mode 1)
(electric-pair-mode 1)
#+end_src

** Auto-revert
*** Revert Dired and other buffers
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq global-auto-revert-non-file-buffers t)
#+end_src

*** Revert buffers when the underlying file has changed
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(global-auto-revert-mode 1)
#+end_src

** Make ESC quit prompts

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Simplify Yes/No Prompts

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(fset 'yes-or-no-p 'y-or-n-p)
(setq use-dialog-box nil)
#+end_src

** Prettify Symbols
Prettify symbols mode, a built-in mode for displaying sequences of characters as fancy characters or symbols.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(global-prettify-symbols-mode 1)
(defun add-pretty-lambda ()
    "Make some word or string show as pretty Unicode symbols.  See https://unicodelookup.com for more."
    (setq prettify-symbols-alist
                '(("lambda" . 955)
                    ("->" . 8594)
                    ("<=" . 8804)
                    (">=" . 8805))))
(add-hook 'prog-mode-hook 'add-pretty-lambda)
(add-hook 'org-mode-hook 'add-pretty-lambda)
#+end_src

** Smooth Scrolling
Configurations to smooth scrolling.

*** Vertical Scroll

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq scroll-step 1)
(setq scroll-margin 1)
(setq scroll-conservatively 101)
(setq scroll-up-aggressively 0.01)
(setq scroll-down-aggressively 0.01)
(setq auto-window-vscroll nil)
(setq fast-but-imprecise-scrolling nil)
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
(setq mouse-wheel-progressive-speed nil)
#+end_src

*** Horizontal Scroll

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq hscroll-step 1)
(setq hscroll-margin 1)
#+end_src

* Theme
** Doom Theme
+ 'doom-themes-enable-bold' - if nil, bold is universally disabled
+ 'doom-themes-enable-italic' - if nil, italics is universally disabled
+ 'doom-themes-visual-bell-config' - Enable flashing mode-line on errors
+ 'doom-themes-treemacs-theme' - use "doom-colors" for less minimal icon theme
+ 'doom-themes-org-config' - Corrects (and improves) org-mode's native fontification.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
    (load-theme 'doom-one t)

    (doom-themes-visual-bell-config)
    (setq-default doom-themes-treemacs-theme "doom-atom")
    (doom-themes-treemacs-config)
    (doom-themes-org-config))
#+end_src

** JetBrains Darcula

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
;;(use-package jetbrains-darcula-theme
;;	:config
;;	(load-theme 'jetbrains-darcula t))
#+end_src

* Icons
** All-the-icons
NOTE: The first time you load your configuration on a new machine, you'll
need to run the following command interactively so that mode line icons
display correctly:
M-x all-the-icons-install-fonts

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package all-the-icons)
#+end_src

* Dashboard
** Dashboard

An extensible emacs startup screen showing you what’s most important.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package dashboard
    :init
    (setq dashboard-banner-logo-title "Welcome to Emacs!")
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-center-content t)
    (setq dashboard-items '((recents  . 10)
                        (bookmarks . 10)
                        (projects . 5)))
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-navigator t)
    ;; (setq dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name)
    :config
    (dashboard-setup-startup-hook))
#+end_src

** Dashboard in Emacsclient

This setting ensures that emacsclient always opens on dashboard rather than scratch.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

* Modeline

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom
    (doom-modeline-height 25)
    (doom-modeline-persp-name nil)
    )
#+end_src

* Which-Key

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package which-key
    :init
    (which-key-mode)
    (which-key-setup-minibuffer)
    (which-key-show-major-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.5)
    )
#+end_src

* General Keybindings

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package general
    :init
    (setq-default general-override-states '(insert
                                            emacs
                                            hybrid
                                            normal
                                            visual
                                            motion
                                            operator
                                            replace))
    :config
    (general-define-key
        :prefix "SPC"
        :states '(normal visual motion)
        :keymaps 'override

        ","     '(persp-switch-to-buffer* :which-key "workspace beffer")
        "."     '(consult-buffer :which-key "switch beffer")
        ":"     '(execute-extended-command :which-key "M-x")
        "s"     '(treemacs :which-key "treemacs")
        "a"     '(toggle-transparency :which-key "transparency")

        "RET"   '(:ignore t :which-key "bookmark")
        "RET j" '(consult-bookmark :which-key "bookmark jump")
        "RET s" '(bookmark-set :which-key "bookmark set")

        "TAB"   '(:ignore t :which-key "workspaces")
        "TAB n" '(persp-next :which-key "next perspective")
        "TAB p" '(persp-prev :which-key "prev perspective")
        "TAB k" '(persp-kill :which-key "kill perspective")
        "TAB b" '(persp-kill-buffer* :which-key "kill perspective buffer")
        "TAB K" '(persp-kill-others :which-key "kill other perspectives")
        "TAB l" '(persp-switch-last :which-key "switch last perspectives")
        "TAB s" '(persp-switch :which-key "switch by name")
        "TAB S" '(persp-state-save :which-key "save persp")
        "TAB L" '(persp-state-load :which-key "load persp")

        "b"     '(:ignore t :which-key "buffers")
        "b k"   '(kill-buffer :which-key "kill buffer")
        "b w"   '(kill-buffer-and-window :which-key "kill buffer and window")

        "d"     '(:ignore t :whick-key "dired")
        "d d"   '(dired :which-key "open dired")
        "d j"   '(dired-jump :which-key "dired jump")
        "d o"   '(dired-other-frame :which-key "dired other frame")

        "c"     '(:ignore t :which-key "comments")
        "c l"   '(comment-line :whick-key "comment or uncomment line")
        "c r"   '(comment-or-uncomment-region :which-key "comment or uncomment region")

        "e"     '(:ignore t :which-key "eval")
        "e l"   '(eval-last-sexp :which-key "last sexp")

        "f"     '(:ignore t :which-key "files")
        "f d"   '(delete-file :whick-key "delete file")
        "f l"   '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :whick-key "reload emacs config")
        "f s"   '(save-buffer :whick-key "save file")
        "f f"   '(find-file :which-key "find file")

        "g"     '(:ignore t :which-key "git")
        "g l"   '(:ignore t :which-key "log")
        "g l c" '(magit-log-current :which-key "log current")
        "g l f" '(magit-log-buffer-file :which-key "log buffer file")
        "g c"   '(magit-commit :which-key "commit")
        "g s"   '(magit-status :which-key "status")
        "g d"   '(magit-diff-unstaged :which-key "diff unstaged")
        "g c"   '(magit-branch-or-checkout :which-key "branch or checkout")
        "g b"   '(magit-branch :which-key "branch")
        "g p"   '(magit-push-current :which-key "push current")
        "g P"   '(magit-pull-branch :which-key "pull branch")
        "g f"   '(magit-fetch :which-key "fetch")
        "g F"   '(magit-fetch-all :which-key "fetch all")
        "g r"   '(magit-rebase :which-key "rebase")

        "o"     '(:ignore t :which-key "org")
        "o b"   '(:ignore t :whick-key "babel")
        "o b t" '(org-babel-tangle :whick-key "tangle")
        "o t"   '(org-insert-structure-template :whick-key "template")
        "o r"   '(:ignore t :which-key "org-roam")
        "o r t" '(org-roam-buffer-toggle :whick-key "toggle buffer")
        "o r f" '(org-roam-node-find :which-key "node find")
        "o r g" '(org-roam-graph :which-key "graph")
        "o r i" '(org-roam-node-insert :which-key "node insert")
        "o r c" '(org-roam-capture :which-key "capture")
        "o r o" '(org-open-at-point :which-key "open at point")
        "o r d" '(org-roam-dailies-capture-today :which-key "dailies capture today")
        "o r w" '(org-capture-finalize :which-key "finalize")

        "t"   '(:ignore t :which-key "term")
        "t e" '(eshell :whick-key "eshell")
        "t t" '(term :whick-key "term")
        "t v" '(vterm :whick-key "vterm")
        "t o" '(openwith-mode :whick-key "openwith-mode")

        "p"     '(:ignore t :which-key "projectile")
        "p f"   '(projectile-find-file :whick-key "find file")
        "p p"   '(projectile-switch-project :whick-key "switch project")
        "p k"   '(projectile-kill-buffers :whick-key "kill project buffers")

        "q"     '(:ignore t :which-key "quit")
        "q q"   '(save-buffers-kill-terminal :which-key "exit emacs")
        "q k"   '(kill-emacs :which-key "kill emacs")

        "w"     '(:ignore t :which-key "windows")
        "w b"   '(evil-window-bottom-right :which-key "window bottom right")
        "w d"   '(evil-window-delete :which-key "delete window")
        "w s"   '(evil-window-split :which-key "split window")
        "w v"   '(evil-window-vsplit :which-key "vsplit window")
        "w h"   '(evil-window-left :which-key "left window")
        "w l"   '(evil-window-right :which-key "right window")
        "w j"   '(evil-window-down :which-key "down window")
        "w k"   '(evil-window-up :which-key "up window")
        "w ="   '(balance-windows :which-key "balance windows")
        "w +"   '(evil-window-increase-height :which-key "increase window height")
        "w -"   '(evil-window-decrease-height :which-key "decrease window height")
        "w >"   '(evil-window-increase-width :which-key "increase window width")
        "w <"   '(evil-window-decrease-width :which-key "decrease window widht")
        "w t"   '(evil-window-top-left :which-key "window top left")))
#+end_src

* Sudo Edit

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package sudo-edit
    :commands (sudo-edit))
#+end_src

* Evil
** undo-tree

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package undo-tree
    :config
    (global-undo-tree-mode))
#+end_src

** undo-fu

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package undo-fu)
#+end_src

** evil

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-fu)
    :hook ((evil-insert-state-exit . (lambda ()
                                        (call-interactively #'save-buffer)))
            )
    :config
    (evil-mode 1))
#+end_src

** evil-collection

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

** evil shift

Keep text selected after indentation

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(defun my/evil-shift-right ()
    (interactive)
    (evil-shift-right evil-visual-beginning evil-visual-end)
    (evil-normal-state)
    (evil-visual-restore))

(defun my/evil-shift-left ()
    (interactive)
    (evil-shift-left evil-visual-beginning evil-visual-end)
    (evil-normal-state)
    (evil-visual-restore))

(evil-define-key 'visual global-map (kbd ">") 'my/evil-shift-right)
(evil-define-key 'visual global-map (kbd "<") 'my/evil-shift-left)
#+end_src
   
* Dired
** Rainbow

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package dired-rainbow
    :defer 2
    :config
    (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
    (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
    (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
    (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
    (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
    (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
    (dired-rainbow-define media "#de751f" ("mp3" "mp4" "mkv" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
    (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
    (dired-rainbow-define log "#c17d11" ("log"))
    (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
    (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
    (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
    (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
    (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
    (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
    (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
    (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
    (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
    (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
    (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*"))
#+end_src
   
** Single

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package dired-single
    :defer t)
#+end_src
  
** Map

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "H" 'dired-omit-mode
    "l" 'dired-single-buffer)
#+end_src
   
** Dired Icons

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package all-the-icons-dired
    :if (display-graphic-p)
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

* Files
** Opening Files Externally

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package openwith
    :config
    (setq large-file-warning-threshold nil)
    (setq openwith-associations
        (list
            (list (openwith-make-extension-regexp
                '("mpg" "mpeg" "mp3" "mp4"
                    "avi" "wmv" "wav" "mov" "flv"
                    "ogm" "ogg" "mkv"))
                "mpv"
                '(file))
            (list (openwith-make-extension-regexp
                '("xbm" "pbm" "pgm" "ppm" "pnm"
                    "png" "gif" "bmp" "tif" "jpeg"
                    "jpg"))
                    "feh"
                    '(file))
            (list (openwith-make-extension-regexp
                '("pdf"))
                "evince"
                '(file)))))
#+end_src
   
* Workspaces
** persp-mode
+ 'persp-modestring-short' - only displays the current perspective

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package perspective
    :demand t
    :custom
    (persp-initial-frame-name "emacs")
    :config
    (setq-default persp-modestring-short t)
    ;; Running `persp-mode' multiple times resets the perspective list...
    (unless (equal persp-mode t)
    (persp-mode)))
#+end_src
  
* Org
** Org-mode

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package org
    :hook (org-mode . (lambda ()
                        (org-indent-mode)
                        (variable-pitch-mode 1)
                        (auto-fill-mode 0)
                        (visual-line-mode 1)
                        (setq evil-auto-indent nil)
                        (diminish org-indent-mode)))
    :config
    (setq org-ellipsis " ▾"
        org-hide-emphasis-markers t))
#+end_src

** Superstar

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-remove-leading-stars t)
    (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●"))
)
#+end_src

** Size

Increase the size of various *headings*

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(set-face-attribute 'org-document-title nil :font "JetBrains Mono" :weight 'bold :height 1.1)
(dolist (face '((org-level-1 . 1.1)
                (org-level-2 . 1.09)
                (org-level-3 . 1.09)
                (org-level-4 . 1.08)
                (org-level-5 . 1.07)
                (org-level-6 . 1.06)
                (org-level-7 . 1.05)
                (org-level-8 . 1.05)))
    (set-face-attribute (car face) nil :font "JetBrains Mono" :weight 'medium :height (cdr face)))
#+end_src

** Org Indent
Make sure org-indent face is available

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(require 'org-indent)

;; Ensure that anything that should be fixed-pitch in Org files appears that way
(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
(set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
(set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
#+end_src

** Rid of the background
Get rid of the background on column views

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(set-face-attribute 'org-column nil :background nil)
(set-face-attribute 'org-column-title nil :background nil)
#+end_src

** Visual Fill

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package visual-fill-column
    :hook (org-mode . (lambda ()
                        (setq visual-fill-column-width 120
                                visual-fill-column-center-text t)
                        (visual-fill-column-mode 1)))
)
#+end_src

** Roam

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory (file-truename "~/org/roam_notes/"))
    (org-roam-compilation-everywhere t)
    :bind (("C-c n i" . org-roam-node-insert))
    :config
    (org-roam-db-autosync-mode))
#+end_src

** Babel
*** Confirm Evaluate

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq org-confirm-babel-evaluate nil)
#+end_src

*** Load languages

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)
      (shell . t)))
#+end_src

* Vertico
** Vertico
+ 'vertico-resize' - Grow and shrink the Vertico minibuffer.
+ 'vertico-cycle' - Optionally enable cycling for `vertico-next' and `vertico-previous'.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package vertico
    :init
    (vertico-mode)
    (setq vertico-resize t)
    (setq vertico-cycle t)
    )
#+end_src

** Consult

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package consult)
#+end_src

** Orderless
Use the `orderless' completion style. Additionally enable
`partial-completion' for file path expansion. `partial-completion' is
important for wildcard support. Multiple files can be opened at once
with `find-file' if you enter a wildcard. You may also give the
`initials' completion style a try.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package orderless
    :init
    (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Savehist
Persist history over Emacs restarts. Vertico sorts by history position.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package savehist
    :init
    (savehist-mode))
#+end_src

** Emacs
A few more useful configurations.
+ 'completing-read-multiple' - Add prompt indicator
+ 'consult-completing-read-multiple' - Alternatively add prompt indicator

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package emacs
    :init
    (defun crm-indicator (args)
    (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    (setq enable-recursive-minibuffers t))
#+end_src

** Marginalia

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package marginalia
    :init
    (marginalia-mode))
#+end_src

* Terminal
** Vterm

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package vterm)
#+end_src

* Git
** Magit

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package magit)
#+end_src

** diff-hl

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package diff-hl
    :init
    (global-diff-hl-mode)
    (diff-hl-flydiff-mode)
    :hook ((magit-pre-refresh-hook . diff-hl-magit-pre-refresh)
            (magit-post-refresh-hook . diff-hl-magit-post-refresh)))
#+end_src

* Company
** company

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package company
    :init
    (add-hook 'after-init-hook #'global-company-mode)
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    )
#+end_src
   
** company-shell

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package company-shell
    :after sh-script
    :custom (add-to-list 'company-backends 'company-shell))
#+end_src
   
** company-box

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src
   
* Projectile

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package projectile
    :diminish projectile-mode
    :config (projectile-mode +1)
    ;; :custom ((projectile-completion-system 'ivy))
    :bind-keymap ("C-c p" . projectile-command-map)
    :init
    ;; (when (file-directory-p "~/Dev")
    ;; 	(setq projectile-project-search-path '("~/Dev")))
    (setq projectile-switch-project-action #'projectile-dired))
#+end_src
  
* Yasnippet

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package yasnippet :config (yas-global-mode))
#+end_src
  
* Dap

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package dap-mode
    :diminish
    :bind
    (:map dap-mode-map
        (("<f12>" . dap-debug)
        ("<f8>" . dap-continue)
        ("<f9>" . dap-next)
        ("<M-f11>" . dap-step-in)
        ("C-M-<f11>" . dap-step-out)
        ("<f7>" . dap-breakpoint-toggle))))
#+end_src
  
* LSP

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    ;; (setq lsp-keymap-prefix "SPC")
    (setq-default tab-width 4)
    (setq-default c-basic-offset 4)
    ;; (setq-default indent-tabs-mode nil)
    :config
    (lsp-modeline-code-actions-mode t)
    (setq-default lsp-modeline-code-actions-segments '(count icon name))
    (setq-default +format-with-lsp t)
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
        ;; (java-mode . lsp)
        ;; (python-mode . lsp)
        (rust-mode . lsp)
        (sh-mode . lsp)
        (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)
#+end_src
  
* Python
** python-mode

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package python-mode
    :custom
    (python-shell-interpreter "ipython"))
#+end_src

** lsp-pyright

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package lsp-pyright
    :ensure t
    :hook (python-mode . (lambda ()
                            (require 'lsp-pyright)
                            (lsp))))
#+end_src

** poetry

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package poetry
    :hook (python-mode . poetry-tracking-mode))
#+end_src
   
* Rust
** rust-mode

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package rust-mode)
#+end_src

** cargo

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package cargo
    :hook ((rust-mode . cargo-minor-mode)))
#+end_src

* Java

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package meghanada
    :hook (java-mode . (lambda ()
                        (meghanada-mode t)
                        (setq indent-tabs-mode t
                            tab-width 4
                            evil-shift-width 4)
                        ;;(add-hook 'before-save-hook 'meghanada-code-beautify-before-save)
                        ))
    )
#+end_src
  
* Flycheck
** flycheck

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package flycheck
    :config
    (add-to-list 'flycheck-check-syntax-automatically 'idle-change))
#+end_src
   
** flycheck-rust

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package flycheck-rust
    :after (rust-mode)
    :hook ((flycheck-mode . flycheck-rust-setup))
    )
#+end_src
