#+title: Emacs Config

#+property: header-args :mkdirp yes
#+property: header-args :emacs-lisp :tangle-mode (identity #o555) :tangle ~/.config/emacs/init.el

* Table Of Content :toc_1:
- [[#early-init][Early Init]]
- [[#package-management][Package Management]]
- [[#base-config][Base Config]]
- [[#evil][Evil]]
- [[#ui][UI]]
- [[#buffers][Buffers]]
- [[#terminal][Terminal]]
- [[#dired][Dired]]
- [[#org][Org]]
- [[#files][Files]]
- [[#workspaces][Workspaces]]
- [[#completion][Completion]]
- [[#editing][Editing]]
- [[#company][Company]]
- [[#coding][Coding]]
- [[#emacs][Emacs]]
- [[#telega][Telega]]
- [[#exwm][EXWM]]

* Early Init
** garbage collection at startup

#+begin_src emacs-lisp :tangle ~/.config/emacs/early-init.el
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6)
#+end_src

** native compilation settings

#+begin_src emacs-lisp :tangle ~/.config/emacs/early-init.el
(setq comp-deferred-compilation nil)

(when (featurep 'native-compile)
  ;; Silence compiler warnings as they can be pretty disruptive
  (setq native-comp-async-report-warnings-errors nil)

  ;; Make native compilation happens asynchronously
  (setq native-comp-deferred-compilation t)

  ;; Set the right directory to store the native compilation cache
  (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory)))
#+end_src

** disable package-enable-at-startup

=In Emacs 27+, package initialization occurs before `user-init-file' is=
=loaded, but after `early-init-file'. Doom handles package initialization, so=
=we must prevent Emacs from doing it early!=

#+begin_src emacs-lisp :tangle ~/.config/emacs/early-init.el
(setq package-enable-at-startup nil)
#+end_src

=Do not allow loading from the package cache (same reason).=
#+begin_src emacs-lisp :tangle ~/.config/emacs/early-init.el
(setq package-quickstart nil)
#+end_src

** remove some unneeded UI elements

#+begin_src emacs-lisp :tangle ~/.config/emacs/early-init.el
(setq inhibit-startup-message t)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)
(push '(background-color . "#232635") default-frame-alist)
(push '(foreground-color . "#FFFFFF") default-frame-alist)
(push '(mouse-color . "white") default-frame-alist)
#+end_src

** make the initial buffer load faster

#+begin_src emacs-lisp :tangle ~/.config/emacs/early-init.el
(setq initial-major-mode 'fundamental-mode)
#+end_src

** frame inhibit

=Resizing the Emacs frame can be a terribly expensive part of changing the=
=font. By inhibiting this, we easily halve startup times with fonts that are=
=larger than the system default.=

#+begin_src emacs-lisp :tangle ~/.config/emacs/early-init.el
(setq frame-inhibit-implied-resize t)
#+end_src

** disable backup files

#+begin_src emacs-lisp :tangle ~/.config/emacs/early-init.el
(setq make-backup-files nil)
#+end_src

** disable Unnecessary Interface

#+begin_src emacs-lisp :tangle ~/.config/emacs/early-init.el
(menu-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(scroll-bar-mode -1)

(setq inhibit-splash-screen t)
(setq use-file-dialog nil)
#+end_src

** startup optimization

- =Taken from DOOM's init=

=`file-name-handler-alist' is consulted on every `require', `load' and various=
=path/io functions. You get a minor speed up by nooping this. However, this=
=may cause problems on builds of Emacs where its site lisp files aren't=
=byte-compiled and we're forced to load the *.el.gz files (e.g. on Alpine)=

#+begin_src emacs-lisp
(unless (daemonp)
  (defvar doom--initial-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
  ;; Restore `file-name-handler-alist' later, because it is needed for handling
  ;; encrypted or compressed files, among other things.
  (defun doom-reset-file-handler-alist-h ()
    ;; Re-add rather than `setq', because changes to `file-name-handler-alist'
    ;; since startup ought to be preserved.
    (dolist (handler file-name-handler-alist)
      (add-to-list 'doom--initial-file-name-handler-alist handler))
    (setq file-name-handler-alist doom--initial-file-name-handler-alist))
  (add-hook 'emacs-startup-hook #'doom-reset-file-handler-alist-h)
  (add-hook 'after-init-hook (lambda ()
                                 ;; restore after startup
                                 (setq gc-cons-threshold 16777216
                                       gc-cons-percentage 0.1)))
  )
;; Ensure Doom is running out of this file's directory
(setq user-emacs-directory (file-truename (file-name-directory load-file-name)))
#+end_src

* Package Management

- =Install straight.el=

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
      (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
        "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

* Base Config
** fonts

#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :font "JetBrains Mono"
                    :height 96
                    :weight 'normal)

(set-face-attribute 'fixed-pitch nil
                    :font "JetBrains Mono"
                    :height 96
                    :weight 'normal)

(set-face-attribute 'variable-pitch nil
                    :font "JetBrains Mono"
                    :height 96
                    :weight 'normal)
#+end_src

** default coding system

#+begin_src emacs-lisp
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+end_src

** cursor

#+begin_src emacs-lisp
(setq-default evil-normal-state-cursor '(box "medium sea green")
              evil-insert-state-cursor '(bar "medium sea green")
              evil-visual-state-cursor '(hollow "orange")
              blink-cursor-mode nil)
#+end_src

** column number

- =enable column number mode=
#+begin_src emacs-lisp
(column-number-mode)
#+end_src

- =Enable line numbers for some modes=
#+begin_src emacs-lisp
(dolist (mode '(text-mode-hook
                prog-mode-hook
                conf-mode-hook))
  (add-hook mode (lambda ()
                   (display-line-numbers-mode 1)
                   (setq-default display-line-numbers-type 'relative))))
#+end_src

** scrolling

- =Make scrolling less stuttered=

#+begin_src emacs-lisp
(setq auto-window-vscroll nil)
(setq fast-but-imprecise-scrolling t)
(setq scroll-conservatively 101)
(setq scroll-margin 0)
(setq scroll-preserve-screen-position t)
#+end_src

** prompts

- =Make ESC quit prompts=
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

- =Use y and n to confirm/negate prompt instead of yes and no=
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** gc

- =Make GC pauses faster by decreasing the threshold=

#+begin_src emacs-lisp
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src

** Let it snow in Emacs!

#+begin_src emacs-lisp
(straight-use-package 'snow)
#+end_src

* Evil
** evil

#+begin_src emacs-lisp
(straight-use-package 'evil)
#+end_src

  - =Set some variables that must be configured before loading the package=
#+begin_src emacs-lisp
(setq evil-want-integration t
    evil-want-keybinding nil
    ;; evil-want-C-u-scroll t
    ;; evil-want-C-i-jump nil
    evil-respect-visual-line-mode t
    evil-undo-system 'undo-fu)
#+end_src

  - =Load Evil and enable it globally=
#+begin_src emacs-lisp
(require 'evil)
(evil-mode 1)
#+end_src

- =set leader key in normal state=
#+begin_src emacs-lisp
(evil-set-leader 'normal (kbd "SPC"))
#+end_src

- =set local leader in normal state for dired-mode=
#+begin_src emacs-lisp
(evil-set-leader 'normal (kbd "M-SPC") t)
#+end_src

** undo-fu

#+begin_src emacs-lisp
(straight-use-package 'undo-fu)

(define-key evil-normal-state-map "u" 'undo-fu-only-undo)
(define-key evil-normal-state-map "\C-r" 'undo-fu-only-redo)
#+end_src

** evil-collection

#+begin_src emacs-lisp
(straight-use-package 'evil-collection)

(with-eval-after-load 'evil
  (evil-collection-init))
#+end_src

** evil-nerd-commenter

#+begin_src emacs-lisp
(straight-use-package 'evil-nerd-commenter)

(global-set-key (kbd "M-/") 'evilnc-comment-or-uncomment-lines)
#+end_src

** keep text selected after indentation

#+begin_src emacs-lisp
(defun bk/evil-shift-right ()
  (interactive)
  (evil-shift-right evil-visual-beginning evil-visual-end)
  (evil-normal-state)
  (evil-visual-restore))

(defun bk/evil-shift-left ()
  (interactive)
  (evil-shift-left evil-visual-beginning evil-visual-end)
  (evil-normal-state)
  (evil-visual-restore))

(evil-define-key 'visual global-map (kbd ">") 'bk/evil-shift-right)
(evil-define-key 'visual global-map (kbd "<") 'bk/evil-shift-left)
#+end_src

* UI
** icons

#+begin_src emacs-lisp
(straight-use-package 'all-the-icons)
#+end_src

** theme

#+begin_src emacs-lisp
(straight-use-package 'doom-themes)

(setq doom-themes-enable-bold t
      doom-themes-enable-italic t
      doom-themes-visual-bell-config nil)

(doom-themes-org-config)

(load-theme 'doom-one t)
#+end_src

** modeline

#+begin_src emacs-lisp
(straight-use-package 'mood-line)
(mood-line-mode)
#+end_src

** dashboard

#+begin_src emacs-lisp
(straight-use-package 'dashboard)

(setq dashboard-banner-logo-title "Welcome to Emacs!"
      dashboard-startup-banner 'logo
      dashboard-center-content t
      dashboard-items '((recents  . 10)
			(bookmarks . 10))
      dashboard-set-heading-icons t
      dashboard-set-file-icons t
      dashboard-set-navigator t)

(dashboard-setup-startup-hook)
#+end_src

** transparecy

#+begin_src emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(95 . 95))
(add-to-list 'default-frame-alist '(alpha . (95 . 95)))
#+end_src

** helpful

#+begin_src emacs-lisp
(straight-use-package 'helpful)
(require 'helpful)
#+end_src

** visual fill

#+begin_src emacs-lisp
(straight-use-package 'visual-fill-column)

(dolist (mode '(org-mode-hook
                prog-mode-hook))
  (add-hook mode (lambda ()
		           (setq visual-fill-column-width 120
			             visual-fill-column-center-text t)
		           (visual-fill-column-mode 1))))
#+end_src

* Buffers
** reverts

- =Revert Dired and other buffers=
#+begin_src emacs-lisp
(setq global-auto-revert-non-file-buffers t)
#+end_src

- =Revert buffers when the underlying file has changed=
#+begin_src emacs-lisp
(global-auto-revert-mode 1)
#+end_src

** map

#+begin_src emacs-lisp
(evil-define-key 'normal 'global
  (kbd "<leader>fs") 'save-buffer

  (kbd "<leader>bk") 'kill-this-buffer
  (kbd "<leader>bK") 'kill-buffer
  (kbd "<leader>bw") 'kill-buffer-and-window

  (kbd "<leader>bj") 'consult-bookmark
  (kbd "<leader>bs") 'bookmark-set

  (kbd "<leader>bl") 'evil-switch-to-windows-last-buffer

  (kbd "<leader>dd") 'dired
  (kbd "<leader>dj") 'dired-jump

  (kbd "<leader>wv") (lambda () (interactive) (evil-window-vsplit) (other-window 1))
  (kbd "<leader>ws") (lambda () (interactive) (evil-window-split) (other-window 1))
  (kbd "<leader>wh") 'evil-window-left
  (kbd "<leader>wl") 'evil-window-right
  (kbd "<leader>wj") 'evil-window-down
  (kbd "<leader>wk") 'evil-window-up
  (kbd "<leader>wd") 'delete-window
  (kbd "<leader>w=") 'balance-window
  (kbd "<leader>w+") 'evil-window-increase-height
  (kbd "<leader>w-") 'evil-window-decrease-height
  (kbd "<leader>w>") 'evil-window-increase-width
  (kbd "<leader>w<") 'evil-window-decrease-width)
#+end_src

* Terminal
** vterm

#+begin_src emacs-lisp
(straight-use-package 'vterm)

(evil-define-key 'normal 'global
  (kbd "<leader>tt") 'vterm)
#+end_src

* Dired
** diredfl

#+begin_src emacs-lisp
(straight-use-package 'diredfl)
(add-hook 'dired-mode-hook 'diredfl-mode)
#+end_src

** dired-rainbow

#+begin_src emacs-lisp
(straight-use-package 'dired-rainbow)

(require 'dired-rainbow)

(with-eval-after-load 'dired
  (progn
    (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
    (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
    (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
    (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
    (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
    (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
    (dired-rainbow-define media "#de751f" ("mp3" "mp4" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac" "mkv"))
    (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
    (dired-rainbow-define log "#c17d11" ("log"))
    (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
    (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
    (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
    (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
    (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
    (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
    (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
    (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
    (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
    (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
    (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*")
    ))
#+end_src

** dired-open

#+begin_src emacs-lisp
(straight-use-package 'dired-open)

(require 'dired-open)

(with-eval-after-load 'dired
  (setq dired-open-extensions
        '(("mkv" . "mpv")
          ("mp4" . "mpv")
          ("avi" . "mpv")
          ("webm" . "mpv")
          ;; ("html" . "firefox")
          )))
#+end_src

** dired-icons

#+begin_src emacs-lisp
(straight-use-package 'all-the-icons-dired)
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+end_src

** bookmarks

#+begin_src emacs-lisp
(setq bookmark-default-file "~/.emacs-bookmarks")
#+end_src

** map

#+begin_src emacs-lisp
(evil-collection-define-key 'normal 'dired-mode-map
  "h" 'dired-up-directory
  "l" 'dired-find-file)
#+end_src

#+begin_src emacs-lisp
(evil-define-key 'normal dired-mode-map
  (kbd "<localleader>hF") #'helpful-function
  (kbd "<localleader>hC") #'helpful-command

  (kbd "<localleader>fs") 'save-buffer
  (kbd "<localleader>ff") 'find-file

  (kbd "<localleader>.") 'persp-switch-to-buffer*
  (kbd "<localleader>,") 'consult-buffer

  (kbd "<localleader>tt") 'vterm

  (kbd "<localleader>bK") 'kill-buffer
  (kbd "<localleader>bk") 'kill-this-buffer
  (kbd "<localleader>bw") 'kill-buffer-and-window

  (kbd "<localleader>bl") 'evil-switch-to-windows-last-buffer

  (kbd "<localleader>bj") 'consult-bookmark
  (kbd "<localleader>bs") 'bookmark-set

  (kbd "<localleader><tab>n") 'persp-next
  (kbd "<localleader><tab>p") 'persp-prev
  (kbd "<localleader><tab>k") 'persp-kill
  (kbd "<localleader><tab>b") 'persp-kill-buffer* ; kill perspective buffer
  (kbd "<localleader><tab>K") 'persp-kill-others
  (kbd "<localleader><tab>l") 'persp-switch-last
  (kbd "<localleader><tab>.") 'persp-switch ; switch by name
  (kbd "<localleader><tab>r") 'persp-remove-buffer ; remove buffer from current perspective
  (kbd "<localleader><tab>R") 'persp-rename
  (kbd "<localleader><tab>s") 'persp-state-save ; save persp
  (kbd "<localleader><tab>L") 'persp-state-load ; load persp

  (kbd "<localleader>wv") (lambda () (interactive) (evil-window-vsplit) (other-window 1))
  (kbd "<localleader>ws") (lambda () (interactive) (evil-window-split) (other-window 1))
  (kbd "<localleader>wh") 'evil-window-left
  (kbd "<localleader>wl") 'evil-window-right
  (kbd "<localleader>wj") 'evil-window-down
  (kbd "<localleader>wk") 'evil-window-up
  (kbd "<localleader>wd") 'evil-window-delete
  (kbd "<localleader>qq") 'kill-emacs
  (kbd "<localleader>wq") 'save-buffers-kill-emacs)
#+end_src

* Org
** org-mode

#+begin_src emacs-lisp
(straight-use-package 'org)
;; (straight-use-package '(org :type built-in))

(add-hook 'org-mode-hook (lambda ()
                           (org-indent-mode)
                           (variable-pitch-mode 1)
                           (auto-fill-mode 0)
                           (visual-line-mode 1)
                           (setq evil-auto-indent nil)
                           (display-line-numbers-mode 0)))

(setq org-ellipsis " ▾"
      org-hide-emphasis-markers t
      org-src-preserve-indentation t
      org-startup-folded t)
#+end_src

** superstar

#+begin_src emacs-lisp
(straight-use-package 'org-superstar)

(with-eval-after-load "org"
  (add-hook 'org-mode-hook 'org-superstar-mode)

  (setq org-superstar-remove-leading-stars t
	org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** org indent

- =Make sure org-indent face is available=

#+begin_src emacs-lisp
(require 'org-indent)

;; Ensure that anything that should be fixed-pitch in Org files appears that way
(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
(set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
(set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
#+end_src

** rid of the background

- =Get rid of the background on column views=

#+begin_src emacs-lisp
(set-face-attribute 'org-column nil :background nil)
(set-face-attribute 'org-column-title nil :background nil)
#+end_src

** babel
*** Confirm Evaluate

#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+end_src

*** Load languages

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (shell . t)))
#+end_src

** structure templates

#+begin_src emacs-lisp
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("p" . "src python"))
(add-to-list 'org-structure-template-alist '("cf" . "src conf"))
(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("yl" . "src yaml"))
(add-to-list 'org-structure-template-alist '("vr" . "src vimrc"))
(add-to-list 'org-structure-template-alist '("scc" . "src scc"))
#+end_src

** toc-org

#+begin_src emacs-lisp
(straight-use-package 'toc-org)
(add-hook 'org-mode-hook 'toc-org-mode)
#+end_src

** map

#+begin_src emacs-lisp
(evil-define-key 'normal org-mode-map
  ">" 'org-shiftmetaright
  "<" 'org-shiftmetaleft
  (kbd "<leader>obt") 'org-babel-tangle)
#+end_src

* Files
** sudo-edit

#+begin_src emacs-lisp
(straight-use-package 'sudo-edit)
#+end_src

** pdf

#+begin_src emacs-lisp
(straight-use-package 'pdf-tools)
(pdf-tools-install)
(setq-default pdf-view-display-size 'fit-page)
#+end_src

** recent files

#+begin_src emacs-lisp
(recentf-mode 1)
(setq recentf-max-saved-items 50)
#+end_src

** map

#+begin_src emacs-lisp
(evil-define-key 'normal 'global
  (kbd "<leader>ff") 'find-file
  (kbd "<leader>fr") 'recentf-open-files)
#+end_src

* Workspaces
** persp-mode

- ='persp-modestring-short'= - only displays the current perspective

#+begin_src emacs-lisp
(straight-use-package 'perspective)

(setq-default persp-initial-frame-name "Main"
              persp-modestring-short t
              ;;(persp-format-name NAME)
              ;; persp-modestring-dividers '("| " " |" " | ") ; Its value is ("[" "]" "|")
              persp-modestring-dividers '("  " "  " " | ")
              persp-state-default-file "~/.persp")

;; Running `persp-mode' multiple times resets the perspective list...
(unless (equal persp-mode t)
  (persp-mode))
#+end_src

** map

#+begin_src emacs-lisp
(evil-define-key 'normal 'global
  (kbd "<leader>.") 'persp-switch-to-buffer*

  (kbd "<leader><tab>n") 'persp-next
  (kbd "<leader><tab>p") 'persp-prev
  (kbd "<leader><tab>k") 'persp-kill
  (kbd "<leader><tab>b") 'persp-kill-buffer* ; kill perspective buffer
  (kbd "<leader><tab>K") 'persp-kill-others
  (kbd "<leader><tab>l") 'persp-switch-last
  (kbd "<leader><tab>.") 'persp-switch ; switch by name
  (kbd "<leader><tab>r") 'persp-remove-buffer ; remove buffer from current perspective
  (kbd "<leader><tab>R") 'persp-rename
  (kbd "<leader><tab>s") 'persp-state-save ; save persp
  (kbd "<leader><tab>L") 'persp-state-load) ; load persp
#+end_src

* Completion
** vertico

#+begin_src emacs-lisp
(straight-use-package 'vertico)

(vertico-mode 1)
(customize-set-variable 'vertico-cycle t)

(require 'vertico)
(require 'vertico-directory "extensions/vertico-directory.el")

(with-eval-after-load "evil"
  (define-key vertico-map (kbd "C-j") 'vertico-next)
  (define-key vertico-map (kbd "C-k") 'vertico-previous)
  (define-key vertico-map [backspace] 'vertico-directory-delete-char))
#+end_src

** counsel

#+begin_src emacs-lisp
(straight-use-package 'counsel)

;; (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
;; (global-set-key (kbd "M-x") 'counsel-M-x)
;; (global-set-key (kbd "C-x C-f") 'counsel-find-file)
;; (global-set-key (kbd "C-h f") 'counsel-describe-function)
;; (global-set-key (kbd "C-h v") 'counsel-describe-variable)
;; (global-set-key (kbd "C-h o") 'counsel-describe-symbol)
;; (global-set-key (kbd "C-h b") 'counsel-descbinds)
;; (global-set-key (kbd "C-c g") 'counsel-git)
;; (global-set-key (kbd "C-c j") 'counsel-git-grep)
;; (global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-c m") 'counsel-linux-app)
;; (global-set-key (kbd "C-c n") 'counsel-fzf)
;; (global-set-key (kbd "C-x l") 'counsel-locate)
#+end_src

** marginalia

#+begin_src emacs-lisp
(straight-use-package 'marginalia)

(with-eval-after-load "vertico"
  (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  (marginalia-mode 1))
#+end_src

** orderless

#+begin_src emacs-lisp
(straight-use-package 'orderless)

(require 'orderless)
(customize-set-variable 'completion-styles '(orderless))
(customize-set-variable 'completion-category-overrides '((file (styles . (partial-completion)))))
(setq completion-category-defaults nil)
#+end_src

** consult

#+begin_src emacs-lisp
(straight-use-package 'consult)

(global-set-key (kbd "C-s") 'consult-line)
(define-key minibuffer-local-map (kbd "C-r") 'consult-history)

(setq completion-in-region-function #'consult-completion-in-region)
#+end_src

#+begin_src emacs-lisp
(define-key minibuffer-local-map (kbd "C-r") 'consult-history)

(evil-define-key 'normal 'global
  (kbd "<leader>,") 'consult-buffer)
#+end_src

** embark

#+begin_src emacs-lisp
(straight-use-package 'embark)

(global-set-key [remap describe-bindings] #'embark-bindings)
(global-set-key (kbd "C-.") 'embark-act)

;; Use Embark to show bindings in a key prefix with `C-h`
(setq prefix-help-command #'embark-prefix-help-command)
#+end_src

** embark-consult

#+begin_src emacs-lisp
(straight-use-package 'embark-consult)

(with-eval-after-load "embark consult"
  (add-hook 'embark-collect-mode 'consult-preview-at-point-mode))
#+end_src

** savehist

- =Persist history over Emacs restarts. Vertico sorts by history position=

#+begin_src emacs-lisp
(savehist-mode 1)
#+end_src

** minibuffer backward kill

#+begin_src emacs-lisp
(defun bk/minibuffer-backward-kill (arg)
  "When minibuffer is completing a file name delete up to parent
folder, otherwise delete a word"
  (interactive "p")
  (if minibuffer-completing-file-name
      ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
      (if (string-match-p "/." (minibuffer-contents))
          (zap-up-to-char (- arg) ?/)
        (delete-minibuffer-contents))
    (backward-kill-word arg)))
#+end_src

* Editing
** ws-butler

- =Set up ws-butler for trimming whitespace and line endings=
#+begin_src emacs-lisp
(straight-use-package 'ws-butler)

(add-hook 'text-mode-hook 'ws-butler-mode)
(add-hook 'prog-mode-hook 'ws-butler-mode)
#+end_src

** kill-ring

- =Do not saves duplicates in kill-ring=
#+begin_src emacs-lisp
(setq kill-do-not-save-duplicates t)
#+end_src

** space/tabs

- =Use spaces instead of tabs=
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil
              tab-width 4)
#+end_src

** save-place

#+begin_src emacs-lisp
(save-place-mode 1)
#+end_src

** parentheses

#+begin_src emacs-lisp
(show-paren-mode 1)
(electric-pair-mode 1)
#+end_src

* Company
** company

#+begin_src emacs-lisp
(straight-use-package 'company)

(add-hook 'after-init-hook 'global-company-mode)

(setq company-minimum-prefix-length 3)
(setq company-idle-delay 0.3)
#+end_src

** company-box

#+begin_src emacs-lisp
(straight-use-package 'company-box)
(add-hook 'company-mode-hook 'company-box-mode)
#+end_src

* Coding
** git
*** magit

#+begin_src emacs-lisp
(straight-use-package 'magit)
#+end_src

*** diff-hl

#+begin_src emacs-lisp
(straight-use-package 'diff-hl)

(global-diff-hl-mode 1)
(diff-hl-flydiff-mode 1)

(add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
(add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
#+end_src

*** map

#+begin_src emacs-lisp
(evil-define-key 'normal 'global
  (kbd "<leader>glc") 'magit-log-current
  (kbd "<leader>glf") 'magit-log-buffer-file
  (kbd "<leader>gc") 'magit-commit
  (kbd "<leader>gs") 'magit-status
  (kbd "<leader>gdu") 'magit-diff-unstaged
  (kbd "<leader>gc") 'magit-branch-or-checkout
  (kbd "<leader>gb") 'magit-branch
  (kbd "<leader>gp") 'magit-push-current
  (kbd "<leader>gP") 'magit-pull-branch
  (kbd "<leader>gf") 'magit-fetch
  (kbd "<leader>gF") 'magit-fetch-all
  (kbd "<leader>gr") 'magit-rebase)
#+end_src

** rust
*** Rust Mode

#+begin_src emacs-lisp
(straight-use-package 'rust-mode)
#+end_src

*** Cargo

#+begin_src emacs-lisp
(straight-use-package 'cargo)
(add-hook 'rust-mode-hook 'cargo-minor-mode)
#+end_src

** python

#+begin_src emacs-lisp
(straight-use-package 'python-mode)
#+end_src

** flycheck

#+begin_src emacs-lisp
(straight-use-package 'flycheck)
(add-hook 'after-init-hook #'global-flycheck-mode)
(setq flycheck-check-syntax-automatically '(save
                                            idle-change
                                            mode-enabled))

(add-hook 'emacs-lisp-mode-hook (lambda ()
                                  (flycheck--emacs-lisp-checkdoc-enabled-p)))
#+end_src

** bash

- =Make shebang (#!) file executable when saved=

#+begin_src emacs-lisp
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
#+end_src

* Emacs

#+begin_src emacs-lisp
(evil-define-key 'normal 'global
  (kbd "<leader>qq") 'kill-emacs
  (kbd "<leader>wq") 'save-buffers-kill-emacs)
#+end_src

* Telega

#+begin_src emacs-lisp
(straight-use-package 'telega)

(setq telega-symbol-unread "🄌")

(dolist (mode '(telega-root-mode-hook
                telega-webpage-mode-hook))
  (add-hook mode (lambda ()
                   (setq telega-root-fill-column 120)
                   (setq visual-fill-column-width 120
                         visual-fill-column-center-text t)
                   (visual-fill-column-mode 1))))

(add-hook 'telega-chat-mode-hook (lambda ()
                                   (setq visual-fill-column-width 75
                                         visual-fill-column-center-text t)
                                   (visual-fill-column-mode 1)))

(telega-mode-line-mode 1)
(telega-notifications-mode 1)
#+end_src

* EXWM
** funcs

#+begin_src emacs-lisp
(defun bk/switch-to-dashboard ()
    (interactive)
    (switch-to-buffer dashboard-buffer-name)
    (dashboard-insert-startupify-lists)
    (dashboard-refresh-buffer))

(defun bk/workspace-init ()
  (let ((workspaces '("Dev" "IDEA" "Net" "Dotfiles" "Media"))
        (index 1))
    (dolist (workspace workspaces)
      (exwm-workspace-switch-create index)
      (persp-switch workspace)
      (persp-kill "Main")
      (if (or (equal index 1)
              (equal index 4)
              (equal index 5))
          (bk/switch-to-dashboard))
      (if (equal index 3) (telega))
      (setq index (+ index 1)))
    (exwm-workspace-switch-create 2)))

;; (defun bk/run-shell-commands ()
;;   (let ((commands '("feh --randomize --bg-fill /run/media/solus/hdd/Pictures/wallpapers/*"
;;                     ;; "picom --config ~/.config/picom.conf"
;;                     "compton --config ~/.config/picom.conf"
;;                     "setxkbmap -option caps:swapescape -layout us,ru -variant -option grp:alt_shift_toggle,grp_led:scroll"
;;                     "./idea/bin/idea.sh"
;;                     )))
;;     (dolist (command commands)
;;       (let ((command-parts (split-string command "[ ]+")))
;;         (apply #'start-process-shell-command (car command-parts) nil command-parts)))
;;     ))

;; (defun bk/run-apps ()
;;   (let ((apps '("xfce4-power-manager" "firefox")))
;;     (dolist (app-name apps)
;;       (let ((app-name-parts (split-string app-name "[ ]+")))
;;         (apply #'call-process `(,(car app-name-parts) nil 0 nil ,@(cdr app-name-parts)))))))
#+end_src

** display time

- =Display time in mode line=

#+begin_src emacs-lisp
(setq display-time-default-load-average nil)
(setq display-time-format "  %H:%M")
(display-time-mode t)
#+end_src

** load exwm

#+begin_src emacs-lisp
(straight-use-package 'exwm)

(require 'exwm)
(require 'exwm-config)
#+end_src

** desktop-environment

- =Control the brightness, volume, take screenshots and lock screen=

#+begin_src emacs-lisp
(straight-use-package 'desktop-environment)

(desktop-environment-mode)

(setq desktop-environment-volume-normal-decrement "2%-"
      desktop-environment-volume-normal-increment "2%+")

(exwm-input-set-key (kbd "<s-f2>") 'desktop-environment-volume-decrement)
(exwm-input-set-key (kbd "<s-f3>") 'desktop-environment-volume-increment)

;; (defun bk/volume-get ()
;;   (interactive)
;;   ;; (start-process-shell-command "" nil "")
;;   (start-process-shell-command "amixer" nil "amixer get Master | grep Mono: | awk '{print $3}'"))

;; (defun bk/show-current-volume ()
;;   (interactive)
;;   (message "Volume %s" (bk/volume-get)))
#+end_src

** updates workspaces

All buffers created in EXWM mode are named "*EXWM*". You may want to
change it in `exwm-update-class-hook' and `exwm-update-title-hook', which
are run when a new X window class name or title is available.

Here'ssome advice on this topic:
+ Always use `exwm-workspace-rename-buffer` to avoid naming conflict.
+ For applications with multiple windows (e.g. GIMP), the class names of
  all windows are probably the same.  Using window titles for them makes
  more sense.

In the following example, we use class names for all windows except for Java applications and GIMP.

#+begin_src emacs-lisp
(add-hook 'exwm-update-class-hook
          (lambda ()
            (unless (or (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                        (string= "gimp" exwm-instance-name))
              (exwm-workspace-rename-buffer exwm-class-name))))
(add-hook 'exwm-update-title-hook
          (lambda ()
            (when (or (not exwm-instance-name)
                      (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                      (string= "gimp" exwm-instance-name))
              (exwm-workspace-rename-buffer exwm-title))))
#+end_src

** input global keys

Global keybindings can be defined with `exwm-input-global-keys'.
Here are a few examples:

#+begin_src emacs-lisp
(setq exwm-input-global-keys
      `(
        ;; Bind "s-w" to switch workspace interactively.
        ([?\s-w] . exwm-workspace-switch)
        ([?\s-q] . (lambda () (interactive) (kill-this-buffer)))
        ([?\s-Q] . (lambda () (interactive) (kill-buffer)))
        ([?\s-e] . (lambda () (interactive) (evil-switch-to-windows-last-buffer)))

        ;; Bind "s-0" to "s-9" to switch to a workspace by its index.
        ,@(mapcar (lambda (i)
                    `(,(kbd (format "s-%d" i)) .
                      (lambda ()
                        (interactive)
                        (exwm-workspace-switch-create ,i))))
                  (number-sequence 0 9))

        ;; Bind "s-&" to launch applications ('M-&' also works if the output
        ;; buffer does not bother you).
        ([?\s-&] . (lambda (command)
		     (interactive (list (read-shell-command "$ ")))
		     (start-process-shell-command command nil command)))))
#+end_src

** input set key

#+begin_src emacs-lisp
(exwm-input-set-key (kbd "<s-return>") 'vterm)
(exwm-input-set-key (kbd "s-b") 'persp-switch-to-buffer*)
#+end_src

** key binding only available in line-mode

To add a key binding only available in line-mode, simply define it in
`exwm-mode-map'.  The following example shortens 'C-c q' to 'C-q'.

#+begin_src emacs-lisp
(define-key exwm-mode-map [?\C-q] #'exwm-input-send-next-key)
#+end_src

** exwm-input-simulation-keys

The following example demonstrates how to use simulation keys to mimic
the behavior of Emacs.  The value of `exwm-input-simulation-keys` is a
list of cons cells (SRC . DEST), where SRC is the key sequence you press
and DEST is what EXWM actually sends to application.  Note that both SRC
and DEST should be key sequences (vector or string).

#+begin_src emacs-lisp
(setq exwm-input-simulation-keys
      '(
        ;; movement
        ([?\C-b] . [left])
        ([?\M-b] . [C-left])
        ([?\C-f] . [right])
        ([?\M-f] . [C-right])
        ([?\C-p] . [up])
        ([?\C-n] . [down])
        ([?\C-a] . [home])
        ([?\C-e] . [end])
        ([?\M-v] . [prior])
        ([?\C-v] . [next])
        ([?\C-d] . [delete])
        ([?\C-k] . [S-end delete])
        ;; cut/paste.
        ([?\C-w] . [?\C-x])
        ([?\M-w] . [?\C-c])
        ([?\C-y] . [?\C-v])
        ;; search
        ([?\C-s] . [?\C-f])))
#+end_src

** hide minibuffer

Hide the minibuffer and echo area.

#+begin_src emacs-lisp
;; (setq exwm-workspace-minibuffer-position 'top)
;; (setq exwm-workspace-minibuffer-position 'bottom)
#+end_src

** tray

#+begin_src emacs-lisp
(require 'exwm-systemtray)
(exwm-systemtray-enable)
#+end_src

** resolution

#+begin_src emacs-lisp
(require 'exwm-randr)

(start-process-shell-command "xrandr" nil "xrandr --output VGA-0 --primary --mode 1920x1080 --pos 0x0 --rotate normal")

(exwm-randr-enable)
#+end_src

** workspaces
*** initial number of workspaces

#+begin_src emacs-lisp
(setq exwm-workspace-number 6)
#+end_src

*** switch next/prev workspace

#+begin_src emacs-lisp
(defun bk/next-workspace ()
  (interactive)
  (let ((next-index (+ exwm-workspace-current-index 1)))
    (if (= next-index exwm-workspace-number)
            (exwm-workspace-switch 0)
          (exwm-workspace-switch next-index))))

(defun bk/prev-workspace ()
  (interactive)
  (let ((next-index (- exwm-workspace-current-index 1)))
    (if (< next-index 0)
            (exwm-workspace-switch (- exwm-workspace-number 1))
          (exwm-workspace-switch next-index))))

(exwm-input-set-key (kbd "M-n") 'bk/next-workspace)
(exwm-input-set-key (kbd "M-p") 'bk/prev-workspace)
#+end_src

*** back and forth switch

#+begin_src emacs-lisp
(defvar prev-workspace-index nil)
(defvar curr-workspace-index nil)

(add-hook 'exwm-workspace-switch-hook (lambda ()
                                        (setq prev-workspace-index curr-workspace-index)
                                        (setq curr-workspace-index exwm-workspace-current-index)))

(exwm-input-set-key (kbd "M-<tab>") (lambda ()
                                      (interactive)
                                      (exwm-workspace-switch prev-workspace-index)))
#+end_src

** enable exwm

Do not forget to enable EXWM. It will start by itself when things are
ready.  You can put it _anywhere_ in your configuration.

#+begin_src emacs-lisp
(add-hook 'exwm-init-hook (lambda ()
                           (bk/workspace-init)
                           (start-process-shell-command "feh" nil "feh --randomize --bg-fill /run/media/solus/hdd/Pictures/wallpapers/*")
                           (start-process-shell-command "compton" nil "compton --config ~/.config/picom.conf")
                           (start-process-shell-command "setxkbmap" nil "setxkbmap -option caps:swapescape -layout us,ru -variant -option grp:alt_shift_toggle,grp_led:scroll")
                           (call-process "xfce4-power-manager" nil 0 nil)
                           (call-process "firefox" nil 0 nil)
                           ;;(bk/run-shell-commands)
                           ;;(bk/run-apps)
                           ))

(exwm-enable)
#+end_src

** startup

#+begin_src emacs-lisp
(add-hook 'exwm-manage-finish-hook (lambda ()
                                    (interactive)
                                    (pcase exwm-class-name
                                      ("jetbrains-idea-ce" (exwm-workspace-move-window 2))
                                      ("*Telega Root*" (exwm-workspace-move-window 3))
                                      ("firefox" (exwm-workspace-move-window 3)))))
#+end_src
